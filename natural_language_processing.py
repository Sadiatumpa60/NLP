# -*- coding: utf-8 -*-
"""Natural Language Processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lLaL6AktNQJvGhl7JsuBiyiaj1cIY449
"""

from google.colab import drive
drive.mount('/content/drive')

import string
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
import seaborn as sns

df_original = pd.read_csv('/content/drive/MyDrive/Natural Language Processing/Language Detection.csv')
df_original.head()

"""cleaning data"""

def remove_pun(text):
  for pun in string.punctuation:
    text = text.replace(pun,"") # remove all the punctions
  text = text.lower() # make everything into lower case 
  return (text)

remove_pun('"Nature" can refer to the phenomena of the phy...	') #checking whether the function is working or not

df_original['Text']=df_original['Text'].apply( remove_pun)

"""Splitting the data into Test & Train"""

from sklearn.model_selection import train_test_split

X = df_original.iloc[:,0] # all rows and 0th columns
Y = df_original.iloc[:,1] # all rows and the 1st columns

X

Y

"""MOnte Carlo Validation

*SVM LInear*
"""

from sklearn import feature_extraction
from sklearn.svm import SVC

vec = feature_extraction.text.TfidfVectorizer(ngram_range=(1,2),analyzer ='char')# (1,2)is define for pi gram

from sklearn import pipeline

model_pipe = pipeline.Pipeline([('vec',vec),('clf',SVC(kernel="linear"))])

from sklearn.model_selection import cross_val_score,StratifiedKFold
from sklearn.model_selection import ShuffleSplit,cross_val_score

from sklearn import datasets

shuffle_split=ShuffleSplit(test_size=0.3,train_size=0.5,n_splits=5)
scores=cross_val_score(model_pipe,X,Y,cv=shuffle_split,scoring="accuracy")
print("Test Accuracy Score :{}".format(scores.mean()))

"""*Logistic Regression*"""

from sklearn.linear_model import LogisticRegression
from sklearn import pipeline
model_pipe = pipeline.Pipeline([('vec',vec),('clf', LogisticRegression())])

shuffle_split=ShuffleSplit(test_size=0.3,train_size=0.5,n_splits=5)
scores1=cross_val_score(model_pipe,X,Y,cv=shuffle_split,scoring="accuracy")
print("Test Accuracy Score :{}".format(scores1.mean()))

"""*Random Forest*"""

from sklearn.ensemble import RandomForestClassifier
from sklearn import pipeline
model_pipe1 = pipeline.Pipeline([('vec',vec),('clf', RandomForestClassifier())])

shuffle_split=ShuffleSplit(test_size=0.3,train_size=0.5,n_splits=5)
scores11=cross_val_score(model_pipe1,X,Y,cv=shuffle_split,scoring="accuracy")
print("Test Accuracy Score :{}".format(scores11.mean()))

"""*SVM rbf*"""

from sklearn.svm import SVC

model_pipe = pipeline.Pipeline([('vec',vec),('clf',SVC(kernel="rbf"))])

shuffle_split=ShuffleSplit(test_size=0.3,train_size=0.5,n_splits=5)
scores111=cross_val_score(model_pipe,X,Y,cv=shuffle_split,scoring="accuracy")
print("Test Accuracy Score :{}".format(scores111.mean()))

"""HoldOut Validation"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=.2)

"""Note
string can not be taken from the ml model.So we should done some vectorization over there.
"""

from sklearn import feature_extraction

from sklearn.svm import SVC

vec = feature_extraction.text.TfidfVectorizer(ngram_range=(1,2),analyzer ='char')# (1,2)is define for pi gram

"""Pineline
we used when you 1st converting your tet to vector

SVM Linear
"""

from sklearn import pipeline

model_pipe = pipeline.Pipeline([('vec',vec),('clf',SVC(kernel="linear"))])

model_pipe.fit(X_train,Y_train)

model_pipe.classes_

predict = model_pipe.predict(X_test)

from sklearn import metrics

metrics.accuracy_score(Y_test,predict)

model_pipe.predict(['My name is ']) # this model can predict accurately

"""Logistic Regression"""

from sklearn.linear_model import LogisticRegression
from sklearn import pipeline
model_pipe = pipeline.Pipeline([('vec',vec),('clf', LogisticRegression())])

model_pipe.fit(X_train,Y_train)

predict = model_pipe.predict(X_test)

from sklearn import metrics

metrics.accuracy_score(Y_test,predict)

"""Random Forest"""

from sklearn.ensemble import RandomForestClassifier
from sklearn import pipeline
model_pipe = pipeline.Pipeline([('vec',vec),('clf', RandomForestClassifier())])

model_pipe.fit(X_train,Y_train)

predict = model_pipe.predict(X_test)

from sklearn import metrics

metrics.accuracy_score(Y_test,predict)

"""SVM rbf"""

from sklearn.svm import SVC

model_pipe = pipeline.Pipeline([('vec',vec),('clf',SVC(kernel="rbf"))])

model_pipe.fit(X_train,Y_train)

predict = model_pipe.predict(X_test)

predict = model_pipe.predict(X_test)

from sklearn import metrics

metrics.accuracy_score(Y_test,predict)

"""Bar Diagram for the accuray of the model"""

import matplotlib.pyplot as plt
import pandas as pd
   
Machine_Learning_Models = ['svm Linear','LR','RF','svm RBF']
Accuracy = [98.11,97.87,96.71,98.21]
  


plt.bar(Machine_Learning_Models,  Accuracy )
plt.title('Bar Diagram')
plt.xlabel('Machine_Learning_Models ')
plt.ylabel('Accuracy')
plt.show()